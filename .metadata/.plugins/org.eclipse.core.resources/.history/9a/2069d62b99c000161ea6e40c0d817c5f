package adt.queue;

public class QueueImpl<T> implements Queue<T> {

	private T[] array;
	private int tail;
	private final int CAP;

	@SuppressWarnings("unchecked")
	public QueueImpl(int size) {
		if (size < 0) {
			size = 0;
		}
		array = (T[]) new Object[size];
		tail = -1;
		CAP = size;
	}

	@Override
	public T head() {
		return this.array[0];
	}

	@Override
	public boolean isEmpty() {
		return this.tail == -1;
	}

	@Override
	public boolean isFull() {
		return this.tail == CAP - 1;
	}

	private void shiftLeft() {
		for(int i = 0; i < this.tail; i++) {
			array[i] = array[i+1];
		}
	}

	@Override
	public void enqueue(T element) throws QueueOverflowException {
		if (isFull()) {
			throw new QueueOverflowException();
		}
		if (element != null) {
			if (isEmpty()) {
				this.tail = 0;
				this.array[0] = element;
			} else {
				this.array[this.tail++] = element;
			}
		}
	}

	@Override
	public T dequeue() throws QueueUnderflowException {
		if (this.isEmpty()) {
            throw new QueueUnderflowException();
		}
		T elementoRemovido = this.array[0];
		this.array[0] = null;
		this.shiftLeft();
		tail--;
		return elementoRemovido;
	}

}
